#!/bin/bash -e

# Adapted from http://lartc.org/wondershaper/

trap "$0 $1 clear" ERR

DEV=$1
DOWNLINK=$2
UPLINK=$3

if [ "x$DEV" = "x" ]
then
    echo "Usage: $0 (DEV) [ 'clear' | (DOWNLINK kbit/s) (UPLINK kbit/s) ]"
    exit 0
fi

# Display status when DOWNLINK/UPLINK are ommitted
if [ "x$DOWNLINK" = "x" ]
then
    tc -s qdisc ls dev $DEV
    tc -s class ls dev $DEV
    exit 0
fi

# Clear both IN and OUT
tc qdisc del dev $DEV root    2> /dev/null > /dev/null || true
tc qdisc del dev $DEV ingress 2> /dev/null > /dev/null || true

if [ "x$DOWNLINK" = "xclear" ]
then
    echo "Cleared traffic rules on $DEV"
    exit 0
fi

# Calculations
#
# Target latency is < 50ms. This means max burst length should be limited to 
# 1/20th the queue's rate.


LOCALIP=$(ifconfig eth0 | sed -ne 's/^.*inet addr:\([0-9.]\+\).*/\1/p')

# =============================================================================
# Queues and Classes
# =============================================================================
# 1: ROOT
# |-- 1:ff LOCAL_TRAFFIC (to/from this host itself)
# | `-- ff: (sfq)
# |-- 1:1 INTERNET->LAN (downlink)
# | `-- 10: (red) Drop traffic as link approaches congestion
# `-- 1:2 LAN->INTERNET (uplink)
#   |-- 1:21: High priority
#   | `-- 21: (sfq)
#   |-- 1:22: Medium priority
#   | `-- 22: (sfq)
#   `-- 1:23: Low priority
#     `-- 23: (sfq) Low priority

# ROOT
tc qdisc add dev $DEV root handle 1: htb

    # LOCAL TRAFFIC
    tc class add dev $DEV parent 1: classid 1:ff htb \
        rate 100mbit \
        burst $((100/20))mbit \
        prio 0

        # .. and its actual queue that holds the packets
		tc qdisc add dev $DEV parent 1:ff handle ff: sfq perturb 10

    # INTERNET->LAN (downlink)
    tc class add dev $DEV parent 1: classid 1:10 htb \
        rate ${DOWNLINK}kbit \
        burst $(($DOWNLINK/20))kbit \
        prio 10

        # .. and its actual queue that holds the packets
        # Note: All values are in BYTES. It doesn't seem to accept "kbit"
        tc qdisc add dev $DEV parent 1:10 handle 10: red \
            limit $(($DOWNLINK*1000/8)) \
            avpkt 1500 \
            burst 0 \
            min $(($DOWNLINK*1000/8 /20)) \
            max $(($DOWNLINK*1000/8)) \
            probability 1

    # LAN->INTERNET (uplink)
    tc class add dev $DEV parent 1: classid 1:2 htb \
        rate ${UPLINK}kbit \
        burst 0 \
        prio 0

        # High priority
        tc class add dev $DEV parent 1:2 classid 1:21 htb \
            ceil ${UPLINK}kbit \
            rate $((${UPLINK}*1/3))kbit \
            prio 0

        # Medium priority
        tc class add dev $DEV parent 1:2 classid 1:22 htb \
            ceil ${UPLINK}kbit \
            rate $((${UPLINK}*1/3))kbit \
            prio 1

        # Low priority
        tc class add dev $DEV parent 1:2 classid 1:23 htb \
            ceil ${UPLINK}kbit \
            rate $((${UPLINK}*1/3))kbit \
            prio 2

        # .. and their actual queues that hold the packets
        tc qdisc add dev $DEV parent 1:21 handle 21: sfq perturb 10
        tc qdisc add dev $DEV parent 1:22 handle 22: sfq perturb 10
        tc qdisc add dev $DEV parent 1:23 handle 23: sfq perturb 10


# =============================================================================
# Filters
# =============================================================================

# -----------------------------------------------------------------------------
# Local traffic (to/from *this* host itself)
for SUBNET in 192.168.0.0/16 10.0.0.0/8 172.16.0.0/12
do
    tc filter add dev $DEV parent 1: protocol ip prio 10 u32 \
        match ip src $LOCALIP/32 \
        match ip dst $SUBNET \
        flowid 1:ff
    tc filter add dev $DEV parent 1: protocol ip prio 10 u32 \
        match ip dst $LOCALIP/32 \
        match ip src $SUBNET \
        flowid 1:ff
done

# -----------------------------------------------------------------------------
# INTERNET->LAN (downlink)
#
# Note: We assume that LAN->LAN traffic is *not* forwarded through this host, 
# and so we need only check the destination of a given packet. We've already 
# taken care of this host's own traffic above.

tc filter add dev $DEV parent 1: protocol ip prio 10 u32 \
    match ip dst 192.168.0.0/16 \
    flowid 1:1
tc filter add dev $DEV parent 1: protocol ip prio 10 u32 \
    match ip dst 10.0.0.0/8 \
    flowid 1:1
tc filter add dev $DEV parent 1: protocol ip prio 10 u32 \
    match ip dst 172.16.0.0/12 \
    flowid 1:1

# -----------------------------------------------------------------------------
# LAN->INTERNET (uplink)
#
# Note: Assumes that all downlink and private traffic have already been 
# classified, so no source checks are performed.

##
## HIGH PRIORITY ##
##

# TOS Minimum Delay (ssh, NOT scp)
tc filter add dev $DEV parent 1: protocol ip prio 20 u32 \
    match ip tos 0x10 0xff \
    flowid 1:21

# ICMP (ip protocol 1) in the interactive class so we can do measurements & 
# impress our friends:
tc filter add dev $DEV parent 1: protocol ip prio 20 u32 \
    match ip protocol 1 0xff \
    flowid 1:21

# Prioritize small packets (<64 bytes)
tc filter add dev $DEV parent 1: protocol ip prio 20 u32 \
    match ip protocol 6 0xff \
    match u8 0x05 0x0f at 0 \
    match u16 0x0000 0xffc0 at 2 \
    flowid 1:21

# Prioritise ACK packets (but only if they are small)
# IP protocol 6,
# IP header length 0x5(32 bit words),
# IP Total length 0x34 (ACK + 12 bytes of TCP options)
# TCP ack set (bit 5, offset 33)
tc filter add dev $DEV parent 1: protocol ip prio 20 u32 \
    match ip protocol 6 0xff \
    match u8 0x05 0x0f at 0 \
    match u16 0x0000 0xffc0 at 2 \
    match u8 0x10 0xff at 33 \
    flowid 1:21

# Traffic headed to robmeerman.co.uk (typically SSH proxying to else where)
tc filter add dev $DEV parent 1: protocol ip prio 20 u32 \
    match ip dst 85.119.82.218/32 \
    flowid 1:21


##
## LOW PRIORITY ##
##

# Vicky's iMac. She can't seem to control her urge to browse massive image 
# galleries when Rob is working from home. This makes SSH sad.
tc filter add dev $DEV parent 1: protocol ip prio 30 u32 \
    match ip src 192.168.1.112/32 \
    flowid 1:23

# TOS High Throughput
tc filter add dev $DEV parent 1: protocol ip prio 30 u32 \
    match ip tos 0x8 0xff \
    flowid 1:23


##
## NORMAL PRIORITY
##

# Internet traffic catch-all. Thus rule must be tested last, and so much have 
# the largest 'prio' value
tc filter add dev $DEV parent 1: protocol ip prio 40 u32 \
    match ip dst 0.0.0.0/0 \
    flowid 1:22
